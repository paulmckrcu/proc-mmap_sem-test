This directory contains a test for /proc scans blocking unrelated
processes carrying out remapping operations.  This blocking occurs
because the /proc scan must read-acquire mmap_sem while the remapping
operations must write-acquire it.  This problem has been seen in the
wild, so the code in this directory is not intended to demonstrate
that problem, but rather to test potential fixes.  In this, it succeeds,
demonstrating the problem in less than a minute on an ordinary system
as opposed to weeks running production workloads across a large fleet.

This can be run from virtme given sufficient CPUs and memory, for example:

./virtme-run --cpus 4 --memory 20G --kdir /home/git/linux-maple/ --mods=auto

This will give you a command prompt within the resulting guest OS.
You will need a writeable /tmp, which can be set up using "mount /tmp"
after adding this line to /etc/fstab:

	tmpfs /tmp tmpfs defaults

Or get with the times and use vng within the kernel source directory,
for example:

vng --cpus 4 --memory 40G --cwd /home/git/proc-mmap_sem-test --exec "make test"


Files:

Makefile
	Build mapper from mapper.c by default.  To run a short test
	of run-proc-vs-map.sh, use "make check".  To run a longer
	and more statistically defensible test, use "make test".

busywait.sh
	Spin checking /proc/PID/FILE until this path no longer exists.
	This script does not actually open this file, but instead
	runs "test -f" on it.

mapper.c
	Repeatedly map and unmap randomly chosen pages in an anonymous
	region of memory.

proc-vs-map.sh
	Spawn mapper on one CPU, then spawn the requested number of
	instances of busywait.sh (at normaly priority) and scanpid.sh (at
	"nice -n 15" priority), all pinned onto another CPU.  Both scripts
	are passed the PID of the mapper process.  Upon completion, the
	script prints "opmax", the script prints out "opmax", which gives
	the longest duration of any of the mmap() and munmap() calls.

run-proc-vs-map.sh
	Repeatedly run proc-vs-map.sh and statistically summarize the
	output.  Each line has the number of instances of the busy scripts
	followed by the median, minimum, and maximum mmap()/munmap()
	operation duration.

scanpid.sh
	Spin reading /proc/PID/FILE until this path no longer exists.
	This scripts repeatedly read-acquires PID's mmap_sem.

For example:

	$ ./proc-vs-map.sh 
	Starting 10-second test at Tue Jan 26 16:24:26 PST 2021.
	pid 25380's current affinity mask: fff
	pid 25380's new affinity mask: 2
	./mapper PID: 25391 duration: 10 region size (pages): 32768
	./mapper: Map region: 0x7f9d475f8000 duration: 10 nmaps: 688 nunmaps: 685 opmax: 264.089 ms

This says that the longest mmap()/munmap() call took 264 milliseconds.
There were ten /proc scanners and ten more CPU-bound scripts, all jammed
onto the same CPU (but a different CPU than the mmap()/munmap() process).

And "./proc-vs-map.sh --help" says this:

	$ ./proc-vs-map.sh --help
	 --- ./proc-vs-map.sh --help
	Usage: ./proc-vs-map.sh optional arguments:
	       --cpubusytasks CPU# (default 2)
	       --cpumapper CPU# (default 0)
	       --duration seconds (default 10)
	       --help
	       --nbusytasks # (default 20)

These arguments allow controlling the placement of the various processes,
the duration of the test, and, as noted earlier, the number of /proc
scanners and CPU-bound scripts.  The main proc-vs-map.sh argument of
interest is --nbusytasks, which specifies the number of /proc scanners
and CPU-bound scripts.

The run-proc-vs-map.sh script does a series of proc-vs-map.sh runs,
reducing and pretty-printing the numbers.  It also has help output:

$ ./run-proc-vs-map.sh -h
Running ./run-proc-vs-map.sh -h
Usage: ./run-proc-vs-map.sh optional arguments:
       --nsamples (default 7)
       --help
       -- proc-vs-map.sh options (no default)

The usual way to run this script is using "make check" for a short
run (a few minutes) or "make test" for a longer run (the better part
of an hour).  Here is "make test" output:

	$ make test
	This test runs for the better part of an hour.
	But it does provide statistically defensible values.
	./run-proc-vs-map.sh --nsamples 24
	Running ./run-proc-vs-map.sh --nsamples 24

		 Worst-case mmap()/munmap()
		   latency (milliseconds)
		 --------------------------
	#Busy    Median   Minimum   Maximum #Hangs
	    0     0.097     0.036     0.141       
	    1    27.296    23.932   116.081       
	   10   123.514   119.402   179.284       
	  100   357.379   307.146  1251.496       
	 1000  8019.600  4114.936 12020.700    *23

The asterisked numbers represent hangs, so that of the 24 1000-#Busy
runs, 23 hung.  The test was ended by killing the interfering processes,
after a five second delay after the expected end of the test.  Note that
adding even one instance of each of busywait.sh and scanpid.sh results
in more than a two orders of magnitude increase in opmax.
